/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

//My includes
#include "include/headers.p4"
#include "include/parsers.p4"

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {  }
}

/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    action drop() {
        mark_to_drop(standard_metadata);
    }

    action_selector(HashAlgorithm.crc16, 32w64, 32w16) wcmp_selector;

    action set_group(bit<14> ecmp_group_id){
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
        meta.ecmp_group_id = ecmp_group_id;
    }

    action set_nhop(bit<14> nhop_id) {
        meta.nhop_id = nhop_id;
    }

    action set_eg_port(egressSpec_t port) {
        standard_metadata.egress_spec = port;
    }

    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            set_group;
            drop;
        }
        default_action = drop;
        size = 1024;
    }

    @max_group_size(256)
    action_selector(HashAlgorithm.crc32, 65536, 32w16) wcmp_group_selector;
    table wcmp_group {
        key = {
            meta.ecmp_group_id:    exact;            
        }
        actions = {
            drop;
            set_nhop;
        }
        implementation = wcmp_group_selector;
        default_action = drop;
        size = 1024;
    }

    table nhop {
        key = {
            meta.nhop_id : exact;
        }
        actions = {
            drop;
            set_eg_port;
        }
        default_action = drop;
        size = 16384;
    }
    apply {
        if (!hdr.ipv4.isValid()) {
            log_msg("Dropping non-ipv4 packet");
            exit;
        }
        if (standard_metadata.checksum_error == 1) {
            log_msg("Dropping ipv4 packet with invalid checksum");
            exit;
        }
        if (l3_lpm.apply().hit) {
            if (wcmp_group.apply().hit) {
                nhop.apply();
            }
        }
    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply {

    }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
	update_checksum(
	    hdr.ipv4.isValid(),
            { hdr.ipv4.version,
	          hdr.ipv4.ihl,
              hdr.ipv4.dscp,
              hdr.ipv4.ecn,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
              hdr.ipv4.hdrChecksum,
              HashAlgorithm.csum16);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

//switch architecture
V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;